/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SymBtc",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SymBtc__factory>;
    getContractFactory(
      name: "BridgeV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeV2__factory>;
    getContractFactory(
      name: "IBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridge__factory>;
    getContractFactory(
      name: "ISyntFabric",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISyntFabric__factory>;
    getContractFactory(
      name: "IMetaRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMetaRouter__factory>;
    getContractFactory(
      name: "MetaRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetaRouter__factory>;
    getContractFactory(
      name: "MetaRouterGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetaRouterGateway__factory>;
    getContractFactory(
      name: "SyntERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyntERC20__factory>;
    getContractFactory(
      name: "SyntFabric",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyntFabric__factory>;
    getContractFactory(
      name: "Synthesis",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Synthesis__factory>;
    getContractFactory(
      name: "AdminableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdminableUpgradeable__factory>;
    getContractFactory(
      name: "RelayRecipientUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RelayRecipientUpgradeable__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1271",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1271>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SymBtc",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SymBtc>;
    getContractAt(
      name: "BridgeV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeV2>;
    getContractAt(
      name: "IBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridge>;
    getContractAt(
      name: "ISyntFabric",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISyntFabric>;
    getContractAt(
      name: "IMetaRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMetaRouter>;
    getContractAt(
      name: "MetaRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MetaRouter>;
    getContractAt(
      name: "MetaRouterGateway",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MetaRouterGateway>;
    getContractAt(
      name: "SyntERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SyntERC20>;
    getContractAt(
      name: "SyntFabric",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SyntFabric>;
    getContractAt(
      name: "Synthesis",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Synthesis>;
    getContractAt(
      name: "AdminableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AdminableUpgradeable>;
    getContractAt(
      name: "RelayRecipientUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RelayRecipientUpgradeable>;

    deployContract(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1271>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Permit>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SymBtc",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SymBtc>;
    deployContract(
      name: "BridgeV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BridgeV2>;
    deployContract(
      name: "IBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBridge>;
    deployContract(
      name: "ISyntFabric",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISyntFabric>;
    deployContract(
      name: "IMetaRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMetaRouter>;
    deployContract(
      name: "MetaRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MetaRouter>;
    deployContract(
      name: "MetaRouterGateway",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MetaRouterGateway>;
    deployContract(
      name: "SyntERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SyntERC20>;
    deployContract(
      name: "SyntFabric",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SyntFabric>;
    deployContract(
      name: "Synthesis",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Synthesis>;
    deployContract(
      name: "AdminableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AdminableUpgradeable>;
    deployContract(
      name: "RelayRecipientUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RelayRecipientUpgradeable>;

    deployContract(
      name: "OwnableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1271",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1271>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Permit>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SymBtc",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SymBtc>;
    deployContract(
      name: "BridgeV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BridgeV2>;
    deployContract(
      name: "IBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBridge>;
    deployContract(
      name: "ISyntFabric",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISyntFabric>;
    deployContract(
      name: "IMetaRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMetaRouter>;
    deployContract(
      name: "MetaRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MetaRouter>;
    deployContract(
      name: "MetaRouterGateway",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MetaRouterGateway>;
    deployContract(
      name: "SyntERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SyntERC20>;
    deployContract(
      name: "SyntFabric",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SyntFabric>;
    deployContract(
      name: "Synthesis",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Synthesis>;
    deployContract(
      name: "AdminableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AdminableUpgradeable>;
    deployContract(
      name: "RelayRecipientUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RelayRecipientUpgradeable>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
