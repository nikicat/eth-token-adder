/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  SymBtc,
  SymBtcInterface,
} from "../../../../symbiosis-contracts/contracts/periphery/SymBtc";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_bridgeAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_synthesisAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_chainId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "bridge",
    outputs: [
      {
        internalType: "contract BridgeV2",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "btcChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "btcTokenAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_btcFee",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_btcTxId",
        type: "bytes32",
      },
      {
        internalType: "SymBtc.BtcInputIndex",
        name: "_inputIndex",
        type: "uint32",
      },
      {
        internalType: "BtcSerial",
        name: "_wrapSerial",
        type: "uint64",
      },
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "swapTokens",
            type: "address[]",
          },
          {
            internalType: "address",
            name: "secondDexRouter",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "secondSwapCalldata",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "finalReceiveSide",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "finalCalldata",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "finalOffset",
            type: "uint256",
          },
        ],
        internalType: "struct SymBtc.FromBTCTransactionTail",
        name: "_tail",
        type: "tuple",
      },
    ],
    name: "getBTCCalldata",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_btcTxId",
        type: "bytes32",
      },
      {
        internalType: "SymBtc.BtcInputIndex",
        name: "_inputIndex",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "_receiveSide",
        type: "address",
      },
    ],
    name: "getBTCExternalID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_btcTxId",
        type: "bytes32",
      },
      {
        internalType: "SymBtc.BtcInputIndex",
        name: "_inputIndex",
        type: "uint32",
      },
    ],
    name: "getBTCInternalID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getBtcTotalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_btcFee",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_btcTxId",
        type: "bytes32",
      },
      {
        internalType: "SymBtc.BtcInputIndex",
        name: "_inputIndex",
        type: "uint32",
      },
      {
        internalType: "BtcSerial",
        name: "_wrapSerial",
        type: "uint64",
      },
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "swapTokens",
            type: "address[]",
          },
          {
            internalType: "address",
            name: "secondDexRouter",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "secondSwapCalldata",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "finalReceiveSide",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "finalCalldata",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "finalOffset",
            type: "uint256",
          },
        ],
        internalType: "struct SymBtc.FromBTCTransactionTail",
        name: "_transactionTail",
        type: "tuple",
      },
    ],
    name: "getHashBTC",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newMPC",
        type: "address",
      },
    ],
    name: "getMpcHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSyntToken",
    outputs: [
      {
        internalType: "contract SyntERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "swapTokens",
            type: "address[]",
          },
          {
            internalType: "address",
            name: "secondDexRouter",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "secondSwapCalldata",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "finalReceiveSide",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "finalCalldata",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "finalOffset",
            type: "uint256",
          },
        ],
        internalType: "struct SymBtc.FromBTCTransactionTail",
        name: "_transactionTail",
        type: "tuple",
      },
    ],
    name: "packBTCTransactionTail",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "synthesis",
    outputs: [
      {
        internalType: "contract Synthesis",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_transactionTail",
        type: "bytes",
      },
    ],
    name: "unpackBTCTransactionTail",
    outputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "swapTokens",
            type: "address[]",
          },
          {
            internalType: "address",
            name: "secondDexRouter",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "secondSwapCalldata",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "finalReceiveSide",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "finalCalldata",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "finalOffset",
            type: "uint256",
          },
        ],
        internalType: "struct SymBtc.FromBTCTransactionTail",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516200145e3803806200145e83398101604081905261003191610092565b600180546001600160a01b03199081166001600160a01b03968716179091556000805482169486169490941790935560028054909316919093161790556003556100dd565b80516001600160a01b038116811461008d57600080fd5b919050565b600080600080608085870312156100a857600080fd5b6100b185610076565b93506100bf60208601610076565b92506100cd60408601610076565b6060959095015193969295505050565b61137180620000ed6000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638f10b83d1161008c578063be51349211610066578063be51349214610234578063e76c16c914610247578063e78cea921461025a578063f2ce981c1461026d57600080fd5b80638f10b83d146101f957806399709766146102015780639e301cc31461022157600080fd5b8063663384c6116100bd578063663384c6146101b3578063769c5f73146101c657806377ae520b146101e657600080fd5b8063154fbf24146100e45780632af896fb146101805780636059140d146101ab575b600080fd5b61016d6100f23660046109e4565b6001546040517f6368616e67654d5043000000000000000000000000000000000000000000000060208201526bffffffffffffffffffffffff19606084811b8216602984015246603d8401529290921b909116605d820152600090607101604051602081830303815290604052805190602001209050919050565b6040519081526020015b60405180910390f35b600054610193906001600160a01b031681565b6040516001600160a01b039091168152602001610177565b61016d610276565b600254610193906001600160a01b031681565b6101d96101d4366004610b0f565b610340565b6040516101779190610c63565b61016d6101f4366004610ddd565b6103a5565b6101936104de565b61021461020f366004610ddd565b6105f6565b6040516101779190610e82565b61021461022f366004610e95565b61085e565b61016d610242366004610eca565b610887565b61016d610255366004610f0a565b61095b565b600154610193906001600160a01b031681565b61016d60035481565b6000306001600160a01b0316638f10b83d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102da9190610f36565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033b9190610f53565b905090565b61038b6040518060c001604052806060815260200160006001600160a01b031681526020016060815260200160006001600160a01b0316815260200160608152602001600081525090565b8180602001905181019061039f9190611020565b92915050565b6001546040517f997097660000000000000000000000000000000000000000000000000000000081526000916001600160a01b031690633d05b088903090639970976690610405908e908e908e908e908e908e908e908e90600401611104565b600060405180830381865afa158015610422573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261044a919081019061116a565b6000546040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815261049092916001600160a01b03169060040161119f565b602060405180830381865afa1580156104ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d19190610f53565b9998505050505050505050565b60008054604080517f5d176f2f000000000000000000000000000000000000000000000000000000008152905183926001600160a01b031691635d176f2f9160048083019260209291908290030181865afa158015610541573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105659190610f36565b6002546003546040517f506890a00000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152602481019190915291169063506890a090604401602060405180830381865afa1580156105d2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039f9190610f36565b60606000604051806101c001604052808b8861061291906111ca565b81526020810187905267ffffffffffffffff8916604080830191909152517fe76c16c9000000000000000000000000000000000000000000000000000000008152600481018c905263ffffffff8b166024820152606090910190309063e76c16c990604401602060405180830381865afa158015610694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b89190610f53565b81526000546040517fbe513492000000000000000000000000000000000000000000000000000000008152600481018d905263ffffffff8c1660248201526001600160a01b039091166044820152602090910190309063be51349290606401602060405180830381865afa158015610734573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107589190610f53565b8152602001600260009054906101000a90046001600160a01b03166001600160a01b031681526020016003548152602001856001600160a01b031681526020018460000151815260200184602001516001600160a01b031681526020018460400151815260200184606001516001600160a01b03168152602001846080015181526020018460a001518152509050806040516024016107f79190611204565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f767224bd0000000000000000000000000000000000000000000000000000000017905291505098975050505050505050565b6060816040516020016108719190610c63565b6040516020818303038152906040529050919050565b6040517fe76c16c90000000000000000000000000000000000000000000000000000000081526004810184905263ffffffff83166024820152600090309063e76c16c990604401602060405180830381865afa1580156108eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090f9190610f53565b6040805160208101929092526bffffffffffffffffffffffff19606085901b16908201524660548201526074016040516020818303038152906040528051906020012090509392505050565b6000828260405160200161099e92919091825260e01b7fffffffff0000000000000000000000000000000000000000000000000000000016602082015260240190565b60405160208183030381529060405280519060200120905092915050565b6001600160a01b03811681146109d157600080fd5b50565b80356109df816109bc565b919050565b6000602082840312156109f657600080fd5b8135610a01816109bc565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715610a5a57610a5a610a08565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610a8957610a89610a08565b604052919050565b600067ffffffffffffffff821115610aab57610aab610a08565b50601f01601f191660200190565b600082601f830112610aca57600080fd5b8135610add610ad882610a91565b610a60565b818152846020838601011115610af257600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215610b2157600080fd5b813567ffffffffffffffff811115610b3857600080fd5b610b4484828501610ab9565b949350505050565b600081518084526020808501945080840160005b83811015610b855781516001600160a01b031687529582019590820190600101610b60565b509495945050505050565b60005b83811015610bab578181015183820152602001610b93565b50506000910152565b60008151808452610bcc816020860160208601610b90565b601f01601f19169290920160200192915050565b6000815160c08452610bf560c0850182610b4c565b905060208301516001600160a01b038082166020870152604085015191508583036040870152610c258383610bb4565b9250806060860151166060870152505060808301518482036080860152610c4c8282610bb4565b91505060a083015160a08501528091505092915050565b602081526000610a016020830184610be0565b803563ffffffff811681146109df57600080fd5b600067ffffffffffffffff821115610ca457610ca4610a08565b5060051b60200190565b600082601f830112610cbf57600080fd5b81356020610ccf610ad883610c8a565b82815260059290921b84018101918181019086841115610cee57600080fd5b8286015b84811015610d12578035610d05816109bc565b8352918301918301610cf2565b509695505050505050565b600060c08284031215610d2f57600080fd5b610d37610a37565b9050813567ffffffffffffffff80821115610d5157600080fd5b610d5d85838601610cae565b8352610d6b602085016109d4565b60208401526040840135915080821115610d8457600080fd5b610d9085838601610ab9565b6040840152610da1606085016109d4565b60608401526080840135915080821115610dba57600080fd5b50610dc784828501610ab9565b60808301525060a082013560a082015292915050565b600080600080600080600080610100898b031215610dfa57600080fd5b8835975060208901359650610e1160408a01610c76565b9550606089013567ffffffffffffffff8082168214610e2f57600080fd5b90955060808a0135945060a08a0135935060c08a013590610e4f826109bc565b90925060e08a01359080821115610e6557600080fd5b50610e728b828c01610d1d565b9150509295985092959890939650565b602081526000610a016020830184610bb4565b600060208284031215610ea757600080fd5b813567ffffffffffffffff811115610ebe57600080fd5b610b4484828501610d1d565b600080600060608486031215610edf57600080fd5b83359250610eef60208501610c76565b91506040840135610eff816109bc565b809150509250925092565b60008060408385031215610f1d57600080fd5b82359150610f2d60208401610c76565b90509250929050565b600060208284031215610f4857600080fd5b8151610a01816109bc565b600060208284031215610f6557600080fd5b5051919050565b80516109df816109bc565b600082601f830112610f8857600080fd5b81516020610f98610ad883610c8a565b82815260059290921b84018101918181019086841115610fb757600080fd5b8286015b84811015610d12578051610fce816109bc565b8352918301918301610fbb565b600082601f830112610fec57600080fd5b8151610ffa610ad882610a91565b81815284602083860101111561100f57600080fd5b610b44826020830160208701610b90565b60006020828403121561103257600080fd5b815167ffffffffffffffff8082111561104a57600080fd5b9083019060c0828603121561105e57600080fd5b611066610a37565b82518281111561107557600080fd5b61108187828601610f77565b82525061109060208401610f6c565b60208201526040830151828111156110a757600080fd5b6110b387828601610fdb565b6040830152506110c560608401610f6c565b60608201526080830151828111156110dc57600080fd5b6110e887828601610fdb565b60808301525060a083015160a082015280935050505092915050565b60006101008a835289602084015263ffffffff8916604084015267ffffffffffffffff881660608401528660808401528560a08401526001600160a01b03851660c08401528060e084015261115b81840185610be0565b9b9a5050505050505050505050565b60006020828403121561117c57600080fd5b815167ffffffffffffffff81111561119357600080fd5b610b4484828501610fdb565b6040815260006111b26040830185610bb4565b90506001600160a01b03831660208301529392505050565b8082018082111561039f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60208152815160208201526020820151604082015260006040830151611236606084018267ffffffffffffffff169052565b5060608301516080830152608083015160a083015260a083015161126560c08401826001600160a01b03169052565b5060c083015160e083015260e083015161010061128c818501836001600160a01b03169052565b808501519150506101c061012081818601526112ac6101e0860184610b4c565b908601519092506101406112ca868201836001600160a01b03169052565b80870151915050601f196101608187860301818801526112ea8584610bb4565b94508088015192505061018061130a818801846001600160a01b03169052565b808801519250506101a08187860301818801526113278584610bb4565b97015195909201949094525092939250505056fea2646970667358221220ad156dc795b45f5fcf60a171eafbe2131793647d328858537502c2226bf5ec5f64736f6c63430008140033";

type SymBtcConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SymBtcConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SymBtc__factory extends ContractFactory {
  constructor(...args: SymBtcConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _bridgeAddress: AddressLike,
    _synthesisAddress: AddressLike,
    _tokenAddress: AddressLike,
    _chainId: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _bridgeAddress,
      _synthesisAddress,
      _tokenAddress,
      _chainId,
      overrides || {}
    );
  }
  override deploy(
    _bridgeAddress: AddressLike,
    _synthesisAddress: AddressLike,
    _tokenAddress: AddressLike,
    _chainId: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _bridgeAddress,
      _synthesisAddress,
      _tokenAddress,
      _chainId,
      overrides || {}
    ) as Promise<
      SymBtc & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SymBtc__factory {
    return super.connect(runner) as SymBtc__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SymBtcInterface {
    return new Interface(_abi) as SymBtcInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): SymBtc {
    return new Contract(address, _abi, runner) as unknown as SymBtc;
  }
}
