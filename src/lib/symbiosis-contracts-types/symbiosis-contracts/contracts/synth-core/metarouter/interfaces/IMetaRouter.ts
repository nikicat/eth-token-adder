/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export declare namespace MetaRouteStructs {
  export type MetaMintTransactionStruct = {
    stableBridgingFee: BigNumberish;
    amount: BigNumberish;
    crossChainID: BytesLike;
    externalID: BytesLike;
    tokenReal: AddressLike;
    chainID: BigNumberish;
    to: AddressLike;
    swapTokens: AddressLike[];
    secondDexRouter: AddressLike;
    secondSwapCalldata: BytesLike;
    finalReceiveSide: AddressLike;
    finalCalldata: BytesLike;
    finalOffset: BigNumberish;
  };

  export type MetaMintTransactionStructOutput = [
    stableBridgingFee: bigint,
    amount: bigint,
    crossChainID: string,
    externalID: string,
    tokenReal: string,
    chainID: bigint,
    to: string,
    swapTokens: string[],
    secondDexRouter: string,
    secondSwapCalldata: string,
    finalReceiveSide: string,
    finalCalldata: string,
    finalOffset: bigint
  ] & {
    stableBridgingFee: bigint;
    amount: bigint;
    crossChainID: string;
    externalID: string;
    tokenReal: string;
    chainID: bigint;
    to: string;
    swapTokens: string[];
    secondDexRouter: string;
    secondSwapCalldata: string;
    finalReceiveSide: string;
    finalCalldata: string;
    finalOffset: bigint;
  };

  export type MetaMintTransactionBTCStruct = {
    stableBridgingFee: BigNumberish;
    amount: BigNumberish;
    serial: BigNumberish;
    crossChainID: BytesLike;
    externalID: BytesLike;
    tokenReal: AddressLike;
    chainID: BigNumberish;
    to: AddressLike;
    swapTokens: AddressLike[];
    secondDexRouter: AddressLike;
    secondSwapCalldata: BytesLike;
    finalReceiveSide: AddressLike;
    finalCalldata: BytesLike;
    finalOffset: BigNumberish;
  };

  export type MetaMintTransactionBTCStructOutput = [
    stableBridgingFee: bigint,
    amount: bigint,
    serial: bigint,
    crossChainID: string,
    externalID: string,
    tokenReal: string,
    chainID: bigint,
    to: string,
    swapTokens: string[],
    secondDexRouter: string,
    secondSwapCalldata: string,
    finalReceiveSide: string,
    finalCalldata: string,
    finalOffset: bigint
  ] & {
    stableBridgingFee: bigint;
    amount: bigint;
    serial: bigint;
    crossChainID: string;
    externalID: string;
    tokenReal: string;
    chainID: bigint;
    to: string;
    swapTokens: string[];
    secondDexRouter: string;
    secondSwapCalldata: string;
    finalReceiveSide: string;
    finalCalldata: string;
    finalOffset: bigint;
  };

  export type MetaRouteTransactionStruct = {
    firstSwapCalldata: BytesLike;
    secondSwapCalldata: BytesLike;
    approvedTokens: AddressLike[];
    firstDexRouter: AddressLike;
    secondDexRouter: AddressLike;
    amount: BigNumberish;
    nativeIn: boolean;
    relayRecipient: AddressLike;
    otherSideCalldata: BytesLike;
  };

  export type MetaRouteTransactionStructOutput = [
    firstSwapCalldata: string,
    secondSwapCalldata: string,
    approvedTokens: string[],
    firstDexRouter: string,
    secondDexRouter: string,
    amount: bigint,
    nativeIn: boolean,
    relayRecipient: string,
    otherSideCalldata: string
  ] & {
    firstSwapCalldata: string;
    secondSwapCalldata: string;
    approvedTokens: string[];
    firstDexRouter: string;
    secondDexRouter: string;
    amount: bigint;
    nativeIn: boolean;
    relayRecipient: string;
    otherSideCalldata: string;
  };
}

export interface IMetaRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "externalCall"
      | "metaMintSwap"
      | "metaMintSwapBTC"
      | "metaRoute"
      | "returnSwap"
      | "sendTransitToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "externalCall",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BytesLike,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "metaMintSwap",
    values: [MetaRouteStructs.MetaMintTransactionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "metaMintSwapBTC",
    values: [MetaRouteStructs.MetaMintTransactionBTCStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "metaRoute",
    values: [MetaRouteStructs.MetaRouteTransactionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "returnSwap",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BytesLike,
      AddressLike,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendTransitToken",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "externalCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metaMintSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metaMintSwapBTC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "metaRoute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "returnSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendTransitToken",
    data: BytesLike
  ): Result;
}

export interface IMetaRouter extends BaseContract {
  connect(runner?: ContractRunner | null): IMetaRouter;
  waitForDeployment(): Promise<this>;

  interface: IMetaRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  externalCall: TypedContractMethod<
    [
      _token: AddressLike,
      _amount: BigNumberish,
      _receiveSide: AddressLike,
      _calldata: BytesLike,
      _offset: BigNumberish,
      _revertableAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  metaMintSwap: TypedContractMethod<
    [_metaMintTransaction: MetaRouteStructs.MetaMintTransactionStruct],
    [void],
    "nonpayable"
  >;

  metaMintSwapBTC: TypedContractMethod<
    [_metaMintTransaction: MetaRouteStructs.MetaMintTransactionBTCStruct],
    [void],
    "nonpayable"
  >;

  metaRoute: TypedContractMethod<
    [_metarouteTransaction: MetaRouteStructs.MetaRouteTransactionStruct],
    [void],
    "payable"
  >;

  returnSwap: TypedContractMethod<
    [
      _token: AddressLike,
      _amount: BigNumberish,
      _router: AddressLike,
      _swapCalldata: BytesLike,
      _burnToken: AddressLike,
      _synthesis: AddressLike,
      _burnCalldata: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  sendTransitToken: TypedContractMethod<
    [_token: AddressLike, _to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "externalCall"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _amount: BigNumberish,
      _receiveSide: AddressLike,
      _calldata: BytesLike,
      _offset: BigNumberish,
      _revertableAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "metaMintSwap"
  ): TypedContractMethod<
    [_metaMintTransaction: MetaRouteStructs.MetaMintTransactionStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "metaMintSwapBTC"
  ): TypedContractMethod<
    [_metaMintTransaction: MetaRouteStructs.MetaMintTransactionBTCStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "metaRoute"
  ): TypedContractMethod<
    [_metarouteTransaction: MetaRouteStructs.MetaRouteTransactionStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "returnSwap"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _amount: BigNumberish,
      _router: AddressLike,
      _swapCalldata: BytesLike,
      _burnToken: AddressLike,
      _synthesis: AddressLike,
      _burnCalldata: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendTransitToken"
  ): TypedContractMethod<
    [_token: AddressLike, _to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
