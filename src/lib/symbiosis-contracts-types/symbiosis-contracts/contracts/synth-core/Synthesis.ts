/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace MetaRouteStructs {
  export type MetaBurnTransactionStruct = {
    stableBridgingFee: BigNumberish;
    amount: BigNumberish;
    crossChainID: BytesLike;
    syntCaller: AddressLike;
    finalReceiveSide: AddressLike;
    sToken: AddressLike;
    finalCallData: BytesLike;
    finalOffset: BigNumberish;
    chain2address: AddressLike;
    receiveSide: AddressLike;
    oppositeBridge: AddressLike;
    revertableAddress: AddressLike;
    chainID: BigNumberish;
    clientID: BytesLike;
  };

  export type MetaBurnTransactionStructOutput = [
    stableBridgingFee: bigint,
    amount: bigint,
    crossChainID: string,
    syntCaller: string,
    finalReceiveSide: string,
    sToken: string,
    finalCallData: string,
    finalOffset: bigint,
    chain2address: string,
    receiveSide: string,
    oppositeBridge: string,
    revertableAddress: string,
    chainID: bigint,
    clientID: string
  ] & {
    stableBridgingFee: bigint;
    amount: bigint;
    crossChainID: string;
    syntCaller: string;
    finalReceiveSide: string;
    sToken: string;
    finalCallData: string;
    finalOffset: bigint;
    chain2address: string;
    receiveSide: string;
    oppositeBridge: string;
    revertableAddress: string;
    chainID: bigint;
    clientID: string;
  };

  export type MetaMintTransactionStruct = {
    stableBridgingFee: BigNumberish;
    amount: BigNumberish;
    crossChainID: BytesLike;
    externalID: BytesLike;
    tokenReal: AddressLike;
    chainID: BigNumberish;
    to: AddressLike;
    swapTokens: AddressLike[];
    secondDexRouter: AddressLike;
    secondSwapCalldata: BytesLike;
    finalReceiveSide: AddressLike;
    finalCalldata: BytesLike;
    finalOffset: BigNumberish;
  };

  export type MetaMintTransactionStructOutput = [
    stableBridgingFee: bigint,
    amount: bigint,
    crossChainID: string,
    externalID: string,
    tokenReal: string,
    chainID: bigint,
    to: string,
    swapTokens: string[],
    secondDexRouter: string,
    secondSwapCalldata: string,
    finalReceiveSide: string,
    finalCalldata: string,
    finalOffset: bigint
  ] & {
    stableBridgingFee: bigint;
    amount: bigint;
    crossChainID: string;
    externalID: string;
    tokenReal: string;
    chainID: bigint;
    to: string;
    swapTokens: string[];
    secondDexRouter: string;
    secondSwapCalldata: string;
    finalReceiveSide: string;
    finalCalldata: string;
    finalOffset: bigint;
  };

  export type MetaMintTransactionBTCStruct = {
    stableBridgingFee: BigNumberish;
    amount: BigNumberish;
    serial: BigNumberish;
    crossChainID: BytesLike;
    externalID: BytesLike;
    tokenReal: AddressLike;
    chainID: BigNumberish;
    to: AddressLike;
    swapTokens: AddressLike[];
    secondDexRouter: AddressLike;
    secondSwapCalldata: BytesLike;
    finalReceiveSide: AddressLike;
    finalCalldata: BytesLike;
    finalOffset: BigNumberish;
  };

  export type MetaMintTransactionBTCStructOutput = [
    stableBridgingFee: bigint,
    amount: bigint,
    serial: bigint,
    crossChainID: string,
    externalID: string,
    tokenReal: string,
    chainID: bigint,
    to: string,
    swapTokens: string[],
    secondDexRouter: string,
    secondSwapCalldata: string,
    finalReceiveSide: string,
    finalCalldata: string,
    finalOffset: bigint
  ] & {
    stableBridgingFee: bigint;
    amount: bigint;
    serial: bigint;
    crossChainID: string;
    externalID: string;
    tokenReal: string;
    chainID: bigint;
    to: string;
    swapTokens: string[];
    secondDexRouter: string;
    secondSwapCalldata: string;
    finalReceiveSide: string;
    finalCalldata: string;
    finalOffset: bigint;
  };
}

export interface SynthesisInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bridge"
      | "burnSyntheticToken"
      | "burnSyntheticTokenBTC"
      | "fabric"
      | "initialize"
      | "isTrustedForwarder"
      | "metaBurnSyntheticToken"
      | "metaMintSyntheticToken"
      | "metaMintSyntheticTokenBTC"
      | "metaRouter"
      | "mintSyntheticToken"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "requestCount"
      | "requests"
      | "revertBurn"
      | "revertBurnAndBurn"
      | "revertMetaBurn"
      | "revertSynthesizeRequest"
      | "revertSynthesizeRequestByBridge"
      | "setFabric"
      | "setMetaRouter"
      | "setMinFeeBTC"
      | "setTokenThreshold"
      | "synthesizeStates"
      | "tokenThreshold"
      | "transferOwnership"
      | "unpause"
      | "versionRecipient"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BTCSynthesizeCompleted"
      | "BurnRequest"
      | "BurnRequestBTC"
      | "ClientIdLog"
      | "ClientIdLogBTC"
      | "OwnershipTransferred"
      | "Paused"
      | "RevertBurnCompleted"
      | "RevertSynthesizeRequest"
      | "SetFabric"
      | "SetMetaRouter"
      | "SetMinFeeBTC"
      | "SetTokenThreshold"
      | "SynthesizeCompleted"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burnSyntheticToken",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "burnSyntheticTokenBTC",
    values: [BigNumberish, BigNumberish, BytesLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "fabric", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "metaBurnSyntheticToken",
    values: [MetaRouteStructs.MetaBurnTransactionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "metaMintSyntheticToken",
    values: [MetaRouteStructs.MetaMintTransactionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "metaMintSyntheticTokenBTC",
    values: [MetaRouteStructs.MetaMintTransactionBTCStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "metaRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintSyntheticToken",
    values: [
      BigNumberish,
      BytesLike,
      BytesLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "requests", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "revertBurn",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revertBurnAndBurn",
    values: [
      BigNumberish,
      BytesLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revertMetaBurn",
    values: [
      BigNumberish,
      BytesLike,
      AddressLike,
      BytesLike,
      AddressLike,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revertSynthesizeRequest",
    values: [
      BigNumberish,
      BytesLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revertSynthesizeRequestByBridge",
    values: [
      BigNumberish,
      BytesLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFabric",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetaRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinFeeBTC",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenThreshold",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "synthesizeStates",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenThreshold",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "versionRecipient",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnSyntheticToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnSyntheticTokenBTC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fabric", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metaBurnSyntheticToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metaMintSyntheticToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metaMintSyntheticTokenBTC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "metaRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintSyntheticToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revertBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revertBurnAndBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertMetaBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertSynthesizeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertSynthesizeRequestByBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFabric", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMetaRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinFeeBTC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "synthesizeStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "versionRecipient",
    data: BytesLike
  ): Result;
}

export namespace BTCSynthesizeCompletedEvent {
  export type InputTuple = [
    id: BytesLike,
    to: AddressLike,
    amount: BigNumberish,
    serial: BigNumberish,
    bridgingFee: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    to: string,
    amount: bigint,
    serial: bigint,
    bridgingFee: bigint
  ];
  export interface OutputObject {
    id: string;
    to: string;
    amount: bigint;
    serial: bigint;
    bridgingFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BurnRequestEvent {
  export type InputTuple = [
    id: BytesLike,
    from: AddressLike,
    chainID: BigNumberish,
    revertableAddress: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    token: AddressLike
  ];
  export type OutputTuple = [
    id: string,
    from: string,
    chainID: bigint,
    revertableAddress: string,
    to: string,
    amount: bigint,
    token: string
  ];
  export interface OutputObject {
    id: string;
    from: string;
    chainID: bigint;
    revertableAddress: string;
    to: string;
    amount: bigint;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BurnRequestBTCEvent {
  export type InputTuple = [
    burnSerial: BigNumberish,
    from: AddressLike,
    to: BytesLike,
    amount: BigNumberish,
    stableBridgingFee: BigNumberish
  ];
  export type OutputTuple = [
    burnSerial: bigint,
    from: string,
    to: string,
    amount: bigint,
    stableBridgingFee: bigint
  ];
  export interface OutputObject {
    burnSerial: bigint;
    from: string;
    to: string;
    amount: bigint;
    stableBridgingFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClientIdLogEvent {
  export type InputTuple = [requestId: BytesLike, clientId: BytesLike];
  export type OutputTuple = [requestId: string, clientId: string];
  export interface OutputObject {
    requestId: string;
    clientId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClientIdLogBTCEvent {
  export type InputTuple = [burnSerial: BigNumberish, clientId: BytesLike];
  export type OutputTuple = [burnSerial: bigint, clientId: string];
  export interface OutputObject {
    burnSerial: bigint;
    clientId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevertBurnCompletedEvent {
  export type InputTuple = [
    id: BytesLike,
    to: AddressLike,
    amount: BigNumberish,
    bridgingFee: BigNumberish,
    token: AddressLike
  ];
  export type OutputTuple = [
    id: string,
    to: string,
    amount: bigint,
    bridgingFee: bigint,
    token: string
  ];
  export interface OutputObject {
    id: string;
    to: string;
    amount: bigint;
    bridgingFee: bigint;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevertSynthesizeRequestEvent {
  export type InputTuple = [id: BytesLike, to: AddressLike];
  export type OutputTuple = [id: string, to: string];
  export interface OutputObject {
    id: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFabricEvent {
  export type InputTuple = [fabric: AddressLike];
  export type OutputTuple = [fabric: string];
  export interface OutputObject {
    fabric: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMetaRouterEvent {
  export type InputTuple = [metaRouter: AddressLike];
  export type OutputTuple = [metaRouter: string];
  export interface OutputObject {
    metaRouter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMinFeeBTCEvent {
  export type InputTuple = [minFee: BigNumberish];
  export type OutputTuple = [minFee: bigint];
  export interface OutputObject {
    minFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTokenThresholdEvent {
  export type InputTuple = [token: AddressLike, threshold: BigNumberish];
  export type OutputTuple = [token: string, threshold: bigint];
  export interface OutputObject {
    token: string;
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SynthesizeCompletedEvent {
  export type InputTuple = [
    id: BytesLike,
    to: AddressLike,
    crossChainID: BytesLike,
    amount: BigNumberish,
    bridgingFee: BigNumberish,
    token: AddressLike
  ];
  export type OutputTuple = [
    id: string,
    to: string,
    crossChainID: string,
    amount: bigint,
    bridgingFee: bigint,
    token: string
  ];
  export interface OutputObject {
    id: string;
    to: string;
    crossChainID: string;
    amount: bigint;
    bridgingFee: bigint;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Synthesis extends BaseContract {
  connect(runner?: ContractRunner | null): Synthesis;
  waitForDeployment(): Promise<this>;

  interface: SynthesisInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bridge: TypedContractMethod<[], [string], "view">;

  burnSyntheticToken: TypedContractMethod<
    [
      _stableBridgingFee: BigNumberish,
      _stoken: AddressLike,
      _amount: BigNumberish,
      _chain2address: AddressLike,
      _receiveSide: AddressLike,
      _oppositeBridge: AddressLike,
      _revertableAddress: AddressLike,
      _chainID: BigNumberish,
      _clientID: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  burnSyntheticTokenBTC: TypedContractMethod<
    [
      _stableBridgingFee: BigNumberish,
      _amount: BigNumberish,
      _to: BytesLike,
      _stoken: AddressLike,
      _clientID: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  fabric: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      _bridge: AddressLike,
      _trustedForwarder: AddressLike,
      _metaRouter: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isTrustedForwarder: TypedContractMethod<
    [forwarder: AddressLike],
    [boolean],
    "view"
  >;

  metaBurnSyntheticToken: TypedContractMethod<
    [_metaBurnTransaction: MetaRouteStructs.MetaBurnTransactionStruct],
    [string],
    "nonpayable"
  >;

  metaMintSyntheticToken: TypedContractMethod<
    [_metaMintTransaction: MetaRouteStructs.MetaMintTransactionStruct],
    [void],
    "nonpayable"
  >;

  metaMintSyntheticTokenBTC: TypedContractMethod<
    [_metaMintTransaction: MetaRouteStructs.MetaMintTransactionBTCStruct],
    [void],
    "nonpayable"
  >;

  metaRouter: TypedContractMethod<[], [string], "view">;

  mintSyntheticToken: TypedContractMethod<
    [
      _stableBridgingFee: BigNumberish,
      _externalID: BytesLike,
      _crossChainID: BytesLike,
      _tokenReal: AddressLike,
      _chainID: BigNumberish,
      _amount: BigNumberish,
      _to: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestCount: TypedContractMethod<[], [bigint], "view">;

  requests: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, string, string, bigint] & {
        recipient: string;
        chain2address: string;
        amount: bigint;
        token: string;
        stoken: string;
        state: bigint;
      }
    ],
    "view"
  >;

  revertBurn: TypedContractMethod<
    [_stableBridgingFee: BigNumberish, _externalID: BytesLike],
    [void],
    "nonpayable"
  >;

  revertBurnAndBurn: TypedContractMethod<
    [
      _stableBridgingFee: BigNumberish,
      _externalID: BytesLike,
      _receiveSide: AddressLike,
      _oppositeBridge: AddressLike,
      _chainID: BigNumberish,
      _revertableAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  revertMetaBurn: TypedContractMethod<
    [
      _stableBridgingFee: BigNumberish,
      _externalID: BytesLike,
      _router: AddressLike,
      _swapCalldata: BytesLike,
      _synthesis: AddressLike,
      _burnToken: AddressLike,
      _burnCalldata: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  revertSynthesizeRequest: TypedContractMethod<
    [
      _stableBridgingFee: BigNumberish,
      _internalID: BytesLike,
      _receiveSide: AddressLike,
      _oppositeBridge: AddressLike,
      _chainID: BigNumberish,
      _clientID: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  revertSynthesizeRequestByBridge: TypedContractMethod<
    [
      _stableBridgingFee: BigNumberish,
      _internalID: BytesLike,
      _receiveSide: AddressLike,
      _oppositeBridge: AddressLike,
      _chainID: BigNumberish,
      _sender: AddressLike,
      _clientID: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setFabric: TypedContractMethod<[_fabric: AddressLike], [void], "nonpayable">;

  setMetaRouter: TypedContractMethod<
    [_metaRouter: AddressLike],
    [void],
    "nonpayable"
  >;

  setMinFeeBTC: TypedContractMethod<
    [_minFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokenThreshold: TypedContractMethod<
    [_token: AddressLike, _threshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  synthesizeStates: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  tokenThreshold: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  versionRecipient: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bridge"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "burnSyntheticToken"
  ): TypedContractMethod<
    [
      _stableBridgingFee: BigNumberish,
      _stoken: AddressLike,
      _amount: BigNumberish,
      _chain2address: AddressLike,
      _receiveSide: AddressLike,
      _oppositeBridge: AddressLike,
      _revertableAddress: AddressLike,
      _chainID: BigNumberish,
      _clientID: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burnSyntheticTokenBTC"
  ): TypedContractMethod<
    [
      _stableBridgingFee: BigNumberish,
      _amount: BigNumberish,
      _to: BytesLike,
      _stoken: AddressLike,
      _clientID: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fabric"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _bridge: AddressLike,
      _trustedForwarder: AddressLike,
      _metaRouter: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isTrustedForwarder"
  ): TypedContractMethod<[forwarder: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "metaBurnSyntheticToken"
  ): TypedContractMethod<
    [_metaBurnTransaction: MetaRouteStructs.MetaBurnTransactionStruct],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "metaMintSyntheticToken"
  ): TypedContractMethod<
    [_metaMintTransaction: MetaRouteStructs.MetaMintTransactionStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "metaMintSyntheticTokenBTC"
  ): TypedContractMethod<
    [_metaMintTransaction: MetaRouteStructs.MetaMintTransactionBTCStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "metaRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mintSyntheticToken"
  ): TypedContractMethod<
    [
      _stableBridgingFee: BigNumberish,
      _externalID: BytesLike,
      _crossChainID: BytesLike,
      _tokenReal: AddressLike,
      _chainID: BigNumberish,
      _amount: BigNumberish,
      _to: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requests"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, string, string, bigint] & {
        recipient: string;
        chain2address: string;
        amount: bigint;
        token: string;
        stoken: string;
        state: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "revertBurn"
  ): TypedContractMethod<
    [_stableBridgingFee: BigNumberish, _externalID: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revertBurnAndBurn"
  ): TypedContractMethod<
    [
      _stableBridgingFee: BigNumberish,
      _externalID: BytesLike,
      _receiveSide: AddressLike,
      _oppositeBridge: AddressLike,
      _chainID: BigNumberish,
      _revertableAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revertMetaBurn"
  ): TypedContractMethod<
    [
      _stableBridgingFee: BigNumberish,
      _externalID: BytesLike,
      _router: AddressLike,
      _swapCalldata: BytesLike,
      _synthesis: AddressLike,
      _burnToken: AddressLike,
      _burnCalldata: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revertSynthesizeRequest"
  ): TypedContractMethod<
    [
      _stableBridgingFee: BigNumberish,
      _internalID: BytesLike,
      _receiveSide: AddressLike,
      _oppositeBridge: AddressLike,
      _chainID: BigNumberish,
      _clientID: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revertSynthesizeRequestByBridge"
  ): TypedContractMethod<
    [
      _stableBridgingFee: BigNumberish,
      _internalID: BytesLike,
      _receiveSide: AddressLike,
      _oppositeBridge: AddressLike,
      _chainID: BigNumberish,
      _sender: AddressLike,
      _clientID: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFabric"
  ): TypedContractMethod<[_fabric: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMetaRouter"
  ): TypedContractMethod<[_metaRouter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinFeeBTC"
  ): TypedContractMethod<[_minFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenThreshold"
  ): TypedContractMethod<
    [_token: AddressLike, _threshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "synthesizeStates"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenThreshold"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "versionRecipient"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BTCSynthesizeCompleted"
  ): TypedContractEvent<
    BTCSynthesizeCompletedEvent.InputTuple,
    BTCSynthesizeCompletedEvent.OutputTuple,
    BTCSynthesizeCompletedEvent.OutputObject
  >;
  getEvent(
    key: "BurnRequest"
  ): TypedContractEvent<
    BurnRequestEvent.InputTuple,
    BurnRequestEvent.OutputTuple,
    BurnRequestEvent.OutputObject
  >;
  getEvent(
    key: "BurnRequestBTC"
  ): TypedContractEvent<
    BurnRequestBTCEvent.InputTuple,
    BurnRequestBTCEvent.OutputTuple,
    BurnRequestBTCEvent.OutputObject
  >;
  getEvent(
    key: "ClientIdLog"
  ): TypedContractEvent<
    ClientIdLogEvent.InputTuple,
    ClientIdLogEvent.OutputTuple,
    ClientIdLogEvent.OutputObject
  >;
  getEvent(
    key: "ClientIdLogBTC"
  ): TypedContractEvent<
    ClientIdLogBTCEvent.InputTuple,
    ClientIdLogBTCEvent.OutputTuple,
    ClientIdLogBTCEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RevertBurnCompleted"
  ): TypedContractEvent<
    RevertBurnCompletedEvent.InputTuple,
    RevertBurnCompletedEvent.OutputTuple,
    RevertBurnCompletedEvent.OutputObject
  >;
  getEvent(
    key: "RevertSynthesizeRequest"
  ): TypedContractEvent<
    RevertSynthesizeRequestEvent.InputTuple,
    RevertSynthesizeRequestEvent.OutputTuple,
    RevertSynthesizeRequestEvent.OutputObject
  >;
  getEvent(
    key: "SetFabric"
  ): TypedContractEvent<
    SetFabricEvent.InputTuple,
    SetFabricEvent.OutputTuple,
    SetFabricEvent.OutputObject
  >;
  getEvent(
    key: "SetMetaRouter"
  ): TypedContractEvent<
    SetMetaRouterEvent.InputTuple,
    SetMetaRouterEvent.OutputTuple,
    SetMetaRouterEvent.OutputObject
  >;
  getEvent(
    key: "SetMinFeeBTC"
  ): TypedContractEvent<
    SetMinFeeBTCEvent.InputTuple,
    SetMinFeeBTCEvent.OutputTuple,
    SetMinFeeBTCEvent.OutputObject
  >;
  getEvent(
    key: "SetTokenThreshold"
  ): TypedContractEvent<
    SetTokenThresholdEvent.InputTuple,
    SetTokenThresholdEvent.OutputTuple,
    SetTokenThresholdEvent.OutputObject
  >;
  getEvent(
    key: "SynthesizeCompleted"
  ): TypedContractEvent<
    SynthesizeCompletedEvent.InputTuple,
    SynthesizeCompletedEvent.OutputTuple,
    SynthesizeCompletedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "BTCSynthesizeCompleted(bytes32,address,uint256,uint64,uint256)": TypedContractEvent<
      BTCSynthesizeCompletedEvent.InputTuple,
      BTCSynthesizeCompletedEvent.OutputTuple,
      BTCSynthesizeCompletedEvent.OutputObject
    >;
    BTCSynthesizeCompleted: TypedContractEvent<
      BTCSynthesizeCompletedEvent.InputTuple,
      BTCSynthesizeCompletedEvent.OutputTuple,
      BTCSynthesizeCompletedEvent.OutputObject
    >;

    "BurnRequest(bytes32,address,uint256,address,address,uint256,address)": TypedContractEvent<
      BurnRequestEvent.InputTuple,
      BurnRequestEvent.OutputTuple,
      BurnRequestEvent.OutputObject
    >;
    BurnRequest: TypedContractEvent<
      BurnRequestEvent.InputTuple,
      BurnRequestEvent.OutputTuple,
      BurnRequestEvent.OutputObject
    >;

    "BurnRequestBTC(uint64,address,bytes,uint256,uint256)": TypedContractEvent<
      BurnRequestBTCEvent.InputTuple,
      BurnRequestBTCEvent.OutputTuple,
      BurnRequestBTCEvent.OutputObject
    >;
    BurnRequestBTC: TypedContractEvent<
      BurnRequestBTCEvent.InputTuple,
      BurnRequestBTCEvent.OutputTuple,
      BurnRequestBTCEvent.OutputObject
    >;

    "ClientIdLog(bytes32,bytes32)": TypedContractEvent<
      ClientIdLogEvent.InputTuple,
      ClientIdLogEvent.OutputTuple,
      ClientIdLogEvent.OutputObject
    >;
    ClientIdLog: TypedContractEvent<
      ClientIdLogEvent.InputTuple,
      ClientIdLogEvent.OutputTuple,
      ClientIdLogEvent.OutputObject
    >;

    "ClientIdLogBTC(uint64,bytes32)": TypedContractEvent<
      ClientIdLogBTCEvent.InputTuple,
      ClientIdLogBTCEvent.OutputTuple,
      ClientIdLogBTCEvent.OutputObject
    >;
    ClientIdLogBTC: TypedContractEvent<
      ClientIdLogBTCEvent.InputTuple,
      ClientIdLogBTCEvent.OutputTuple,
      ClientIdLogBTCEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RevertBurnCompleted(bytes32,address,uint256,uint256,address)": TypedContractEvent<
      RevertBurnCompletedEvent.InputTuple,
      RevertBurnCompletedEvent.OutputTuple,
      RevertBurnCompletedEvent.OutputObject
    >;
    RevertBurnCompleted: TypedContractEvent<
      RevertBurnCompletedEvent.InputTuple,
      RevertBurnCompletedEvent.OutputTuple,
      RevertBurnCompletedEvent.OutputObject
    >;

    "RevertSynthesizeRequest(bytes32,address)": TypedContractEvent<
      RevertSynthesizeRequestEvent.InputTuple,
      RevertSynthesizeRequestEvent.OutputTuple,
      RevertSynthesizeRequestEvent.OutputObject
    >;
    RevertSynthesizeRequest: TypedContractEvent<
      RevertSynthesizeRequestEvent.InputTuple,
      RevertSynthesizeRequestEvent.OutputTuple,
      RevertSynthesizeRequestEvent.OutputObject
    >;

    "SetFabric(address)": TypedContractEvent<
      SetFabricEvent.InputTuple,
      SetFabricEvent.OutputTuple,
      SetFabricEvent.OutputObject
    >;
    SetFabric: TypedContractEvent<
      SetFabricEvent.InputTuple,
      SetFabricEvent.OutputTuple,
      SetFabricEvent.OutputObject
    >;

    "SetMetaRouter(address)": TypedContractEvent<
      SetMetaRouterEvent.InputTuple,
      SetMetaRouterEvent.OutputTuple,
      SetMetaRouterEvent.OutputObject
    >;
    SetMetaRouter: TypedContractEvent<
      SetMetaRouterEvent.InputTuple,
      SetMetaRouterEvent.OutputTuple,
      SetMetaRouterEvent.OutputObject
    >;

    "SetMinFeeBTC(uint256)": TypedContractEvent<
      SetMinFeeBTCEvent.InputTuple,
      SetMinFeeBTCEvent.OutputTuple,
      SetMinFeeBTCEvent.OutputObject
    >;
    SetMinFeeBTC: TypedContractEvent<
      SetMinFeeBTCEvent.InputTuple,
      SetMinFeeBTCEvent.OutputTuple,
      SetMinFeeBTCEvent.OutputObject
    >;

    "SetTokenThreshold(address,uint256)": TypedContractEvent<
      SetTokenThresholdEvent.InputTuple,
      SetTokenThresholdEvent.OutputTuple,
      SetTokenThresholdEvent.OutputObject
    >;
    SetTokenThreshold: TypedContractEvent<
      SetTokenThresholdEvent.InputTuple,
      SetTokenThresholdEvent.OutputTuple,
      SetTokenThresholdEvent.OutputObject
    >;

    "SynthesizeCompleted(bytes32,address,bytes32,uint256,uint256,address)": TypedContractEvent<
      SynthesizeCompletedEvent.InputTuple,
      SynthesizeCompletedEvent.OutputTuple,
      SynthesizeCompletedEvent.OutputObject
    >;
    SynthesizeCompleted: TypedContractEvent<
      SynthesizeCompletedEvent.InputTuple,
      SynthesizeCompletedEvent.OutputTuple,
      SynthesizeCompletedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
