/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface SyntFabricInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createRepresentationByAdmin"
      | "getRealRepresentation"
      | "getSyntRepresentation"
      | "getSyntRepresentationByKey"
      | "initialize"
      | "owner"
      | "renounceOwnership"
      | "synthesis"
      | "synthesize"
      | "transferOwnership"
      | "unsynthesize"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred" | "RepresentationCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createRepresentationByAdmin",
    values: [AddressLike, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRealRepresentation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSyntRepresentation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSyntRepresentationByKey",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "synthesis", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "synthesize",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unsynthesize",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createRepresentationByAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRealRepresentation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSyntRepresentation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSyntRepresentationByKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "synthesis", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "synthesize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsynthesize",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepresentationCreatedEvent {
  export type InputTuple = [
    rToken: AddressLike,
    chainID: BigNumberish,
    sToken: AddressLike
  ];
  export type OutputTuple = [rToken: string, chainID: bigint, sToken: string];
  export interface OutputObject {
    rToken: string;
    chainID: bigint;
    sToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SyntFabric extends BaseContract {
  connect(runner?: ContractRunner | null): SyntFabric;
  waitForDeployment(): Promise<this>;

  interface: SyntFabricInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createRepresentationByAdmin: TypedContractMethod<
    [
      _rtoken: AddressLike,
      _chainID: BigNumberish,
      _stokenName: string,
      _stokenSymbol: string,
      _decimals: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getRealRepresentation: TypedContractMethod<
    [_syntTokenAdr: AddressLike],
    [string],
    "view"
  >;

  getSyntRepresentation: TypedContractMethod<
    [_realTokenAdr: AddressLike, _chainID: BigNumberish],
    [string],
    "view"
  >;

  getSyntRepresentationByKey: TypedContractMethod<
    [_key: BytesLike],
    [string],
    "view"
  >;

  initialize: TypedContractMethod<
    [_synthesis: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  synthesis: TypedContractMethod<[], [string], "view">;

  synthesize: TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish, _stoken: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unsynthesize: TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish, _stoken: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createRepresentationByAdmin"
  ): TypedContractMethod<
    [
      _rtoken: AddressLike,
      _chainID: BigNumberish,
      _stokenName: string,
      _stokenSymbol: string,
      _decimals: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRealRepresentation"
  ): TypedContractMethod<[_syntTokenAdr: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSyntRepresentation"
  ): TypedContractMethod<
    [_realTokenAdr: AddressLike, _chainID: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSyntRepresentationByKey"
  ): TypedContractMethod<[_key: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_synthesis: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "synthesis"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "synthesize"
  ): TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish, _stoken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unsynthesize"
  ): TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish, _stoken: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RepresentationCreated"
  ): TypedContractEvent<
    RepresentationCreatedEvent.InputTuple,
    RepresentationCreatedEvent.OutputTuple,
    RepresentationCreatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RepresentationCreated(address,uint256,address)": TypedContractEvent<
      RepresentationCreatedEvent.InputTuple,
      RepresentationCreatedEvent.OutputTuple,
      RepresentationCreatedEvent.OutputObject
    >;
    RepresentationCreated: TypedContractEvent<
      RepresentationCreatedEvent.InputTuple,
      RepresentationCreatedEvent.OutputTuple,
      RepresentationCreatedEvent.OutputObject
    >;
  };
}
