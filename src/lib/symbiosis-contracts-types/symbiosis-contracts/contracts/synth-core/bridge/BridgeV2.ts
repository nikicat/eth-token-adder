/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface BridgeV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "changeMPC"
      | "changeMPCSigned"
      | "currentChainId"
      | "getMpcHash"
      | "getRequestHash"
      | "initialize"
      | "isAdmin"
      | "isTransmitter"
      | "mpc"
      | "newMPC"
      | "newMPCEffectiveTime"
      | "oldMPC"
      | "owner"
      | "receiveRequestV2"
      | "receiveRequestV2Signed"
      | "renounceOwnership"
      | "setAdminPermission"
      | "setTransmitterStatus"
      | "transferOwnership"
      | "transmitRequestBTC"
      | "transmitRequestV2"
      | "withdrawFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LogChangeMPC"
      | "OracleRequest"
      | "OracleRequestBTC"
      | "OwnershipTransferred"
      | "SetAdminPermission"
      | "SetTransmitterStatus"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "changeMPC",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMPCSigned",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMpcHash",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestHash",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTransmitter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "mpc", values?: undefined): string;
  encodeFunctionData(functionFragment: "newMPC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newMPCEffectiveTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oldMPC", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiveRequestV2",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveRequestV2Signed",
    values: [BytesLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminPermission",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransmitterStatus",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transmitRequestBTC",
    values: [AddressLike, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transmitRequestV2",
    values: [BytesLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "changeMPC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeMPCSigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMpcHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRequestHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTransmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mpc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newMPC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newMPCEffectiveTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oldMPC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveRequestV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveRequestV2Signed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransmitterStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transmitRequestBTC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transmitRequestV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;
}

export namespace LogChangeMPCEvent {
  export type InputTuple = [
    oldMPC: AddressLike,
    newMPC: AddressLike,
    effectiveTime: BigNumberish,
    chainId: BigNumberish
  ];
  export type OutputTuple = [
    oldMPC: string,
    newMPC: string,
    effectiveTime: bigint,
    chainId: bigint
  ];
  export interface OutputObject {
    oldMPC: string;
    newMPC: string;
    effectiveTime: bigint;
    chainId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleRequestEvent {
  export type InputTuple = [
    bridge: AddressLike,
    callData: BytesLike,
    receiveSide: AddressLike,
    oppositeBridge: AddressLike,
    chainId: BigNumberish
  ];
  export type OutputTuple = [
    bridge: string,
    callData: string,
    receiveSide: string,
    oppositeBridge: string,
    chainId: bigint
  ];
  export interface OutputObject {
    bridge: string;
    callData: string;
    receiveSide: string;
    oppositeBridge: string;
    chainId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleRequestBTCEvent {
  export type InputTuple = [
    bridge: AddressLike,
    from: AddressLike,
    to: BytesLike,
    amount: BigNumberish,
    burnSerial: BigNumberish
  ];
  export type OutputTuple = [
    bridge: string,
    from: string,
    to: string,
    amount: bigint,
    burnSerial: bigint
  ];
  export interface OutputObject {
    bridge: string;
    from: string;
    to: string;
    amount: bigint;
    burnSerial: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAdminPermissionEvent {
  export type InputTuple = [admin: AddressLike, permission: boolean];
  export type OutputTuple = [admin: string, permission: boolean];
  export interface OutputObject {
    admin: string;
    permission: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTransmitterStatusEvent {
  export type InputTuple = [transmitter: AddressLike, status: boolean];
  export type OutputTuple = [transmitter: string, status: boolean];
  export interface OutputObject {
    transmitter: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BridgeV2 extends BaseContract {
  connect(runner?: ContractRunner | null): BridgeV2;
  waitForDeployment(): Promise<this>;

  interface: BridgeV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  changeMPC: TypedContractMethod<
    [_newMPC: AddressLike],
    [boolean],
    "nonpayable"
  >;

  changeMPCSigned: TypedContractMethod<
    [_newMPC: AddressLike, signature: BytesLike],
    [boolean],
    "nonpayable"
  >;

  currentChainId: TypedContractMethod<[], [bigint], "view">;

  getMpcHash: TypedContractMethod<[_newMPC: AddressLike], [string], "view">;

  getRequestHash: TypedContractMethod<
    [_callData: BytesLike, _receiveSide: AddressLike],
    [string],
    "view"
  >;

  initialize: TypedContractMethod<[_mpc: AddressLike], [void], "nonpayable">;

  isAdmin: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isTransmitter: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  mpc: TypedContractMethod<[], [string], "view">;

  newMPC: TypedContractMethod<[], [string], "view">;

  newMPCEffectiveTime: TypedContractMethod<[], [bigint], "view">;

  oldMPC: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  receiveRequestV2: TypedContractMethod<
    [_callData: BytesLike, _receiveSide: AddressLike],
    [void],
    "nonpayable"
  >;

  receiveRequestV2Signed: TypedContractMethod<
    [_callData: BytesLike, _receiveSide: AddressLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAdminPermission: TypedContractMethod<
    [_user: AddressLike, _permission: boolean],
    [void],
    "nonpayable"
  >;

  setTransmitterStatus: TypedContractMethod<
    [_transmitter: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transmitRequestBTC: TypedContractMethod<
    [
      _from: AddressLike,
      _to: BytesLike,
      _amount: BigNumberish,
      _burnSerial: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transmitRequestV2: TypedContractMethod<
    [
      _callData: BytesLike,
      _receiveSide: AddressLike,
      _oppositeBridge: AddressLike,
      _chainId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdrawFee: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "changeMPC"
  ): TypedContractMethod<[_newMPC: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "changeMPCSigned"
  ): TypedContractMethod<
    [_newMPC: AddressLike, signature: BytesLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMpcHash"
  ): TypedContractMethod<[_newMPC: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRequestHash"
  ): TypedContractMethod<
    [_callData: BytesLike, _receiveSide: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_mpc: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isAdmin"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTransmitter"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mpc"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "newMPC"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "newMPCEffectiveTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "oldMPC"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveRequestV2"
  ): TypedContractMethod<
    [_callData: BytesLike, _receiveSide: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "receiveRequestV2Signed"
  ): TypedContractMethod<
    [_callData: BytesLike, _receiveSide: AddressLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAdminPermission"
  ): TypedContractMethod<
    [_user: AddressLike, _permission: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTransmitterStatus"
  ): TypedContractMethod<
    [_transmitter: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transmitRequestBTC"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: BytesLike,
      _amount: BigNumberish,
      _burnSerial: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transmitRequestV2"
  ): TypedContractMethod<
    [
      _callData: BytesLike,
      _receiveSide: AddressLike,
      _oppositeBridge: AddressLike,
      _chainId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFee"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "LogChangeMPC"
  ): TypedContractEvent<
    LogChangeMPCEvent.InputTuple,
    LogChangeMPCEvent.OutputTuple,
    LogChangeMPCEvent.OutputObject
  >;
  getEvent(
    key: "OracleRequest"
  ): TypedContractEvent<
    OracleRequestEvent.InputTuple,
    OracleRequestEvent.OutputTuple,
    OracleRequestEvent.OutputObject
  >;
  getEvent(
    key: "OracleRequestBTC"
  ): TypedContractEvent<
    OracleRequestBTCEvent.InputTuple,
    OracleRequestBTCEvent.OutputTuple,
    OracleRequestBTCEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SetAdminPermission"
  ): TypedContractEvent<
    SetAdminPermissionEvent.InputTuple,
    SetAdminPermissionEvent.OutputTuple,
    SetAdminPermissionEvent.OutputObject
  >;
  getEvent(
    key: "SetTransmitterStatus"
  ): TypedContractEvent<
    SetTransmitterStatusEvent.InputTuple,
    SetTransmitterStatusEvent.OutputTuple,
    SetTransmitterStatusEvent.OutputObject
  >;

  filters: {
    "LogChangeMPC(address,address,uint256,uint256)": TypedContractEvent<
      LogChangeMPCEvent.InputTuple,
      LogChangeMPCEvent.OutputTuple,
      LogChangeMPCEvent.OutputObject
    >;
    LogChangeMPC: TypedContractEvent<
      LogChangeMPCEvent.InputTuple,
      LogChangeMPCEvent.OutputTuple,
      LogChangeMPCEvent.OutputObject
    >;

    "OracleRequest(address,bytes,address,address,uint256)": TypedContractEvent<
      OracleRequestEvent.InputTuple,
      OracleRequestEvent.OutputTuple,
      OracleRequestEvent.OutputObject
    >;
    OracleRequest: TypedContractEvent<
      OracleRequestEvent.InputTuple,
      OracleRequestEvent.OutputTuple,
      OracleRequestEvent.OutputObject
    >;

    "OracleRequestBTC(address,address,bytes,uint256,uint64)": TypedContractEvent<
      OracleRequestBTCEvent.InputTuple,
      OracleRequestBTCEvent.OutputTuple,
      OracleRequestBTCEvent.OutputObject
    >;
    OracleRequestBTC: TypedContractEvent<
      OracleRequestBTCEvent.InputTuple,
      OracleRequestBTCEvent.OutputTuple,
      OracleRequestBTCEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SetAdminPermission(address,bool)": TypedContractEvent<
      SetAdminPermissionEvent.InputTuple,
      SetAdminPermissionEvent.OutputTuple,
      SetAdminPermissionEvent.OutputObject
    >;
    SetAdminPermission: TypedContractEvent<
      SetAdminPermissionEvent.InputTuple,
      SetAdminPermissionEvent.OutputTuple,
      SetAdminPermissionEvent.OutputObject
    >;

    "SetTransmitterStatus(address,bool)": TypedContractEvent<
      SetTransmitterStatusEvent.InputTuple,
      SetTransmitterStatusEvent.OutputTuple,
      SetTransmitterStatusEvent.OutputObject
    >;
    SetTransmitterStatus: TypedContractEvent<
      SetTransmitterStatusEvent.InputTuple,
      SetTransmitterStatusEvent.OutputTuple,
      SetTransmitterStatusEvent.OutputObject
    >;
  };
}
