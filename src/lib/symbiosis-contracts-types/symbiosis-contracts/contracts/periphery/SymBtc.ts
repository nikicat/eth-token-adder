/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace SymBtc {
  export type FromBTCTransactionTailStruct = {
    swapTokens: AddressLike[];
    secondDexRouter: AddressLike;
    secondSwapCalldata: BytesLike;
    finalReceiveSide: AddressLike;
    finalCalldata: BytesLike;
    finalOffset: BigNumberish;
  };

  export type FromBTCTransactionTailStructOutput = [
    swapTokens: string[],
    secondDexRouter: string,
    secondSwapCalldata: string,
    finalReceiveSide: string,
    finalCalldata: string,
    finalOffset: bigint
  ] & {
    swapTokens: string[];
    secondDexRouter: string;
    secondSwapCalldata: string;
    finalReceiveSide: string;
    finalCalldata: string;
    finalOffset: bigint;
  };
}

export interface SymBtcInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bridge"
      | "btcChainId"
      | "btcTokenAddress"
      | "getBTCCalldata"
      | "getBTCExternalID"
      | "getBTCInternalID"
      | "getBtcTotalSupply"
      | "getHashBTC"
      | "getMpcHash"
      | "getSyntToken"
      | "packBTCTransactionTail"
      | "synthesis"
      | "unpackBTCTransactionTail"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "btcChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "btcTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBTCCalldata",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      SymBtc.FromBTCTransactionTailStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBTCExternalID",
    values: [BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBTCInternalID",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBtcTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHashBTC",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      SymBtc.FromBTCTransactionTailStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMpcHash",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSyntToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "packBTCTransactionTail",
    values: [SymBtc.FromBTCTransactionTailStruct]
  ): string;
  encodeFunctionData(functionFragment: "synthesis", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unpackBTCTransactionTail",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "btcChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "btcTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBTCCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBTCExternalID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBTCInternalID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBtcTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHashBTC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMpcHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSyntToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "packBTCTransactionTail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "synthesis", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unpackBTCTransactionTail",
    data: BytesLike
  ): Result;
}

export interface SymBtc extends BaseContract {
  connect(runner?: ContractRunner | null): SymBtc;
  waitForDeployment(): Promise<this>;

  interface: SymBtcInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bridge: TypedContractMethod<[], [string], "view">;

  btcChainId: TypedContractMethod<[], [bigint], "view">;

  btcTokenAddress: TypedContractMethod<[], [string], "view">;

  getBTCCalldata: TypedContractMethod<
    [
      _btcFee: BigNumberish,
      _btcTxId: BytesLike,
      _inputIndex: BigNumberish,
      _wrapSerial: BigNumberish,
      _stableBridgingFee: BigNumberish,
      _amount: BigNumberish,
      _to: AddressLike,
      _tail: SymBtc.FromBTCTransactionTailStruct
    ],
    [string],
    "view"
  >;

  getBTCExternalID: TypedContractMethod<
    [_btcTxId: BytesLike, _inputIndex: BigNumberish, _receiveSide: AddressLike],
    [string],
    "view"
  >;

  getBTCInternalID: TypedContractMethod<
    [_btcTxId: BytesLike, _inputIndex: BigNumberish],
    [string],
    "view"
  >;

  getBtcTotalSupply: TypedContractMethod<[], [bigint], "view">;

  getHashBTC: TypedContractMethod<
    [
      _btcFee: BigNumberish,
      _btcTxId: BytesLike,
      _inputIndex: BigNumberish,
      _wrapSerial: BigNumberish,
      _stableBridgingFee: BigNumberish,
      _amount: BigNumberish,
      _to: AddressLike,
      _transactionTail: SymBtc.FromBTCTransactionTailStruct
    ],
    [string],
    "view"
  >;

  getMpcHash: TypedContractMethod<[_newMPC: AddressLike], [string], "view">;

  getSyntToken: TypedContractMethod<[], [string], "view">;

  packBTCTransactionTail: TypedContractMethod<
    [_transactionTail: SymBtc.FromBTCTransactionTailStruct],
    [string],
    "view"
  >;

  synthesis: TypedContractMethod<[], [string], "view">;

  unpackBTCTransactionTail: TypedContractMethod<
    [_transactionTail: BytesLike],
    [SymBtc.FromBTCTransactionTailStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bridge"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "btcChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "btcTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBTCCalldata"
  ): TypedContractMethod<
    [
      _btcFee: BigNumberish,
      _btcTxId: BytesLike,
      _inputIndex: BigNumberish,
      _wrapSerial: BigNumberish,
      _stableBridgingFee: BigNumberish,
      _amount: BigNumberish,
      _to: AddressLike,
      _tail: SymBtc.FromBTCTransactionTailStruct
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBTCExternalID"
  ): TypedContractMethod<
    [_btcTxId: BytesLike, _inputIndex: BigNumberish, _receiveSide: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBTCInternalID"
  ): TypedContractMethod<
    [_btcTxId: BytesLike, _inputIndex: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBtcTotalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHashBTC"
  ): TypedContractMethod<
    [
      _btcFee: BigNumberish,
      _btcTxId: BytesLike,
      _inputIndex: BigNumberish,
      _wrapSerial: BigNumberish,
      _stableBridgingFee: BigNumberish,
      _amount: BigNumberish,
      _to: AddressLike,
      _transactionTail: SymBtc.FromBTCTransactionTailStruct
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMpcHash"
  ): TypedContractMethod<[_newMPC: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSyntToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "packBTCTransactionTail"
  ): TypedContractMethod<
    [_transactionTail: SymBtc.FromBTCTransactionTailStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "synthesis"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpackBTCTransactionTail"
  ): TypedContractMethod<
    [_transactionTail: BytesLike],
    [SymBtc.FromBTCTransactionTailStructOutput],
    "view"
  >;

  filters: {};
}
